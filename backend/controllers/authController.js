const User = require('../models/userModel');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const { v4: uuidv4 } = require('uuid');
const { OAuth2Client } = require('google-auth-library');
const googleClient = process.env.GOOGLE_CLIENT_ID ? new OAuth2Client(process.env.GOOGLE_CLIENT_ID) : null;

async function generateUuid() {
    return uuidv4();
}

// ƒêƒÉng k√Ω
exports.register = async (req, res) => {
    try {
        console.log("üì• Body nh·∫≠n t·ª´ frontend:", req.body);  // üëà th√™m d√≤ng n√†y
        // Chu·∫©n h√≥a d·ªØ li·ªáu ƒë·∫ßu v√†o
        const name = req.body.name;
        const userName = req.body.userName?.trim();
        const email = req.body.email?.trim().toLowerCase();
        const password = req.body.password;


        if (!name || !userName || !password || !email) {
            return res.status(400).json({ message: "Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt" });
        }


        // Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({ message: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!' });
        }

        // M√£ h√≥a m·∫≠t kh·∫©u
        const hashedPassword = await bcrypt.hash(password, 10);

        // T·∫°o ng∆∞·ªùi d√πng m·ªõi
        const newUser = new User({
            userId: await generateUuid(),
            name,
            userName,
            password: hashedPassword,
            email,
        });

        await newUser.save();

        res.status(201).json({ message: 'ƒêƒÉng k√Ω th√†nh c√¥ng!' });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

// ƒêƒÉng nh·∫≠p
exports.login = async (req, res) => {
    try {
        const { mail, password } = req.body;

        // T√¨m ng∆∞·ªùi d√πng theo email
        const user = await User.findOne({ mail });
        if (!user) {
            return res.status(404).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!' });
        }

        // Ki·ªÉm tra m·∫≠t kh·∫©u
        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(401).json({ message: 'Sai m·∫≠t kh·∫©u!' });
        }

        // T·∫°o token
        const token = jwt.sign({ id: user.userId }, process.env.JWT_SECRET, { expiresIn: '1h' });

        res.status(200).json({ message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng!', token });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

// ƒêƒÉng nh·∫≠p b·∫±ng Google (verify idToken t·ª´ client)
exports.googleLogin = async (req, res) => {
    try {
        const { idToken } = req.body;
        if (!idToken) {
            return res.status(400).json({ message: 'Thi·∫øu idToken.' });
        }
        if (!googleClient) {
            return res.status(500).json({ message: 'Ch∆∞a c·∫•u h√¨nh GOOGLE_CLIENT_ID.' });
        }

        const ticket = await googleClient.verifyIdToken({ idToken, audience: process.env.GOOGLE_CLIENT_ID });
        const payload = ticket.getPayload();
        const googleId = payload.sub;
        const email = payload.email;
        const name = payload.name || payload.given_name || '';

        if (!email) {
            return res.status(400).json({ message: 'Kh√¥ng l·∫•y ƒë∆∞·ª£c email t·ª´ Google.' });
        }

        let user = await User.findOne({ mail: email });
        if (!user) {
            user = new User({
                userId: await generateUuid(),
                userName: email,
                password: await bcrypt.hash(await generateUuid(), 10), // placeholder ƒë·ªÉ th·ªèa required
                mail: email,
                name,
                provider: 'google',
                googleId
            });
            await user.save();
        } else {
            // C·∫≠p nh·∫≠t th√¥ng tin provider/googleId n·∫øu c·∫ßn
            const update = {};
            if (!user.googleId) update.googleId = googleId;
            if (user.provider !== 'google') update.provider = 'google';
            if (Object.keys(update).length) {
                user.set(update);
                await user.save();
            }
        }

        const token = jwt.sign({ id: user.userId }, process.env.JWT_SECRET, { expiresIn: '1h' });
        return res.status(200).json({ message: 'ƒêƒÉng nh·∫≠p Google th√†nh c√¥ng!', token });
    } catch (error) {
        return res.status(500).json({ error: error.message });
    }
};