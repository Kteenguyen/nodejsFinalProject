const mongoose = require('mongoose');
const crypto = require('crypto'); // üëà 1. Import th∆∞ vi·ªán crypto c·ªßa Node.js

const userSchema = new mongoose.Schema({
    userId: { type: String, required: true },
    name: { type: String },
    userName: { type: String, required: true },
    password: { type: String, required: true },
    email: { type: String, required: true, unique: true, trim: true, lowercase: true },
    phoneNumber: { type: String },
    role: { type: String, enum: ['user', 'admin'], default: 'user' },
    loyaltyPoints: { type: Number, default: 0 },
    googleId: { type: String },
    provider: { type: String, enum: ['local', 'google'], default: 'local' },
    
    // ================== B·ªî SUNG C√ÅC TR∆Ø·ªúNG CHO QU√äN M·∫¨T KH·∫®U ==================
    passwordResetToken: String,
    passwordResetExpires: Date,
    // =======================================================================

    shippingAddresses: {
        type: [
            new mongoose.Schema(
                {
                    addressId: { type: String, required: true },
                    label: { type: String },
                    recipientName: { type: String, required: true },
                    phoneNumber: { type: String, required: true },
                    street: { type: String, required: true },
                    ward: { type: String },
                    district: { type: String },
                    city: { type: String, required: true },
                    country: { type: String, default: 'Vietnam' },
                    postalCode: { type: String },
                    isDefault: { type: Boolean, default: false }
                },
                { _id: false }
            )
        ],
        default: []
    }
}, {
    toJSON: { virtuals: true },
    toObject: { virtuals: true }
});

// Virtual 'isAdmin' (gi·ªØ nguy√™n)
userSchema.virtual('isAdmin').get(function() {
    return this.role === 'admin';
});

// ================== B·ªî SUNG PH∆Ø∆†NG TH·ª®C T·∫†O TOKEN RESET M·∫¨T KH·∫®U ==================
userSchema.methods.createPasswordResetToken = function() {
    // T·∫°o m·ªôt token ng·∫´u nhi√™n
    const resetToken = crypto.randomBytes(32).toString('hex');

    // M√£ h√≥a token v√† l∆∞u v√†o database
    this.passwordResetToken = crypto
        .createHash('sha256')
        .update(resetToken)
        .digest('hex');

    // ƒê·∫∑t th·ªùi gian h·∫øt h·∫°n cho token (v√≠ d·ª•: 10 ph√∫t)
    this.passwordResetExpires = Date.now() + 10 * 60 * 1000;

    // Tr·∫£ v·ªÅ token ch∆∞a m√£ h√≥a ƒë·ªÉ g·ª≠i cho ng∆∞·ªùi d√πng qua email
    return resetToken;
};
// =================================================================================

module.exports = mongoose.model('User', userSchema);