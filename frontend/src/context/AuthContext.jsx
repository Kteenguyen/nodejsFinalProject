// frontend/src/context/AuthContext.jsx
import { createContext, useContext, useState, useEffect, useCallback } from "react";
import { AuthController } from "../controllers/AuthController"; // Import AuthController

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
    const [user, setUser] = useState(null);
    const [isAuthenticated, setIsAuthenticated] = useState(false);
    const [isLoadingAuth, setIsLoadingAuth] = useState(true); // State loading

    // ‚úÖ H√†m g·ªçi API (/api/users/profile) ƒë·ªÉ ki·ªÉm tra cookie
    const checkAuthStatus = useCallback(async () => {
        setIsLoadingAuth(true);
        try {
            const result = await AuthController.checkAuth();

            if (result.isAuthenticated && result.user) {
                // ... (logic th√†nh c√¥ng) ...
                console.log("AuthContext: User authenticated from cookie:", result.user.email);
            } else {
                // ... (logic th·∫•t b·∫°i) ...
                console.log("AuthContext: User not authenticated."); // ‚úÖ Ch·ªâ log th√¥ng b√°o n√†y, kh√¥ng ph·∫£i l·ªói ƒë·ªè
            }
        } catch (error) {
            // ‚úÖ Ch·ªâ log l·ªói ra console n·∫øu n√≥ KH√îNG ph·∫£i 401
            if (error.response && error.response.status !== 401) {
                console.error("AuthContext: Error checking auth (not 401):", error);
            } else {
                // N·∫øu l√† l·ªói 401, kh√¥ng c·∫ßn log l·ªói ƒë·ªè n·ªØa
                console.log("AuthContext: No valid authentication token found.");
            }
            setUser(null);
            setIsAuthenticated(false);
        } finally {
            setIsLoadingAuth(false);
        }
    }, []);

    // ‚úÖ T·ª± ƒë·ªông ki·ªÉm tra khi app t·∫£i l·∫ßn ƒë·∫ßu
    useEffect(() => {
        checkAuthStatus();
    }, [checkAuthStatus]);

    // üëâ H√†m login (ch·ªâ c·∫ßn nh·∫≠n userInfo)
    // (V√¨ backend ƒë√£ set cookie khi g·ªçi API login/googleLogin)
    const login = (userInfo) => {
        setUser(userInfo);
        setIsAuthenticated(true);
        console.log("AuthContext: Login successful for user:", userInfo.email);
    };

    // üëâ H√†m logout (g·ªçi API ƒë·ªÉ backend x√≥a cookie)
    const logout = async () => {
        try {
            await AuthController.logout(); // G·ªçi API /logout
            setUser(null);
            setIsAuthenticated(false);
            console.log("AuthContext: User logged out.");
        } catch (error) {
            console.error("AuthContext: Error during logout:", error);
            // D√π l·ªói API, frontend v·∫´n clear state
            setUser(null);
            setIsAuthenticated(false);
        }
    };

    // Gi√° tr·ªã cung c·∫•p cho c√°c component con
    const authContextValue = {
        user,
        isAuthenticated,
        isLoadingAuth,
        login,
        logout,
        checkAuthStatus // D√πng ƒë·ªÉ refresh
    };

    // Hi·ªÉn th·ªã loading trong khi ki·ªÉm tra auth l·∫ßn ƒë·∫ßu
    if (isLoadingAuth) {
        return <div>ƒêang t·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng...</div>;
    }

    return (
        <AuthContext.Provider value={authContextValue}>
            {children}
        </AuthContext.Provider>
    );
};

export const useAuth = () => useContext(AuthContext);